predicate _TO_BE_COMPLETED
(* replace all occurrences of _TO_BE_COMPLETED below *)

use int.Int
use array.Array

exception Not_found

val midpoint (l u: int) : int
  requires { l <= u }
  ensures  { l <= result <= u }

let binary_search (a: array int) (v: int) : int
  requires { forall i1 i2: int. 0 <= i1 <= i2 < length a -> a[i1] <= a[i2] }
  ensures  { a[result] = v }
  raises   { Not_found -> forall i : int. (0<= i < length(a) -> a[i] <> v)}
= 
    let ref min = 0 in 
    let ref max = length(a) - 1 in
    while ( min <= max ) do
        invariant {forall i :int.
            (0 <= i <min \/ max < i < length(a))  -> a[i] <> v }
        invariant { min > max  \/  0 <= min <= max < length a }
        variant { max - min } 
        
        let mid = midpoint min max in
        let vmid = a[mid] in
        
        if vmid < v 
        then min <- mid + 1 
        else if vmid > v
        then max <- mid - 1 
        else return mid;
    done;
    raise Not_found;