predicate _TO_BE_COMPLETED
(* replace all occurrences of _TO_BE_COMPLETED below *)

use int.Int
use array.Array

exception Not_found

val midpoint (l u: int) : int
  requires { l <= u }
  ensures  { l <= result <= u }

let binary_search (a: array int) (v: int) : int
  requires { forall i1 i2: int. 
        0 <= i1 <= i2 < length a -> a[i1] <= a[i2] }
  ensures  { a[result] = v }
  raises   { Not_found -> forall i:int. 
        0 <= i < length(a) -> a[i] <> v }
= 
    let ref debut = 0 in
    let ref fin = length(a) - 1 in
    while(fin > debut) do
    invariant { true }
    variant { fin - debut }
        let mid = midpoint debut fin in
        if v < a[mid]
        then fin <- mid - 1
        else if v > a[mid]
        then debut <- mid + 1
        else return mid
    done;
    raise Not_found;
    absurd (* replace with code *)
