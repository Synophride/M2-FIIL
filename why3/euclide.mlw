(* Euclidean division *)

predicate _TO_BE_COMPLETED
(* replace all occurrences of _TO_BE_COMPLETED below *)

use int.Int

let euclide (a b: int): (int, int)
  requires { b > 0 }
  requires { a >= 0}
  returns  { q, r -> a = q * b + r /\ 0 <= r < b}
=
  let ref q = 0 in
  let ref r = a in
  while r >= b do
    invariant { q >= 0 }
    invariant { b > 0} 
    invariant { r >= 0 }
    invariant { a = q * b + r } 
    variant { r }
    r <- r - b;
    q <- q + 1
  done;
  q, r

let main () = euclide 42 17
